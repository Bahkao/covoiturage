la fonction getDistance (location/script.py) calcule la distance à vol d'oiseau entre deux points selon la formule d'Haversine
Haversine formula:

R = earth’s radius (mean radius = 6,371km)
Δlat = lat2− lat1
Δlong = long2− long1
a = sin²(Δlat/2) + cos(lat1).cos(lat2).sin²(Δlong/2)
c = 2.atan2(√a, √(1−a))
d = R.c

formule extraite de : http://www.movable-type.co.uk/scripts/latlong.html

The haversine formula is an equation important in navigation, giving great-circle distances between two points on a sphere from their longitudes and latitudes. It is a special case of a more general formula in spherical trigonometry, the law of haversines, relating the sides and angles of spherical "triangles".

Dans mon cas, j ai choisi l'entier supérieur pour le retour de la valeur.
-----

Ellipse : 

Soit A et B les deux foyers de l'ellipse, et dans mon cas les deux extrémités du trajet

Soit [AB] la distance à vol d oiseau entre ces deux points.
Soit DMAX la distance supplémentaire que le conducteur veuille bien effectuer

Tout point M tel que : [AM]+[MB] <= [AB] + DMAX appartient à l'ellipse et sera donc un choix possible pour l'algorithme
Il suffira de passer ce point par google map et comparer les distances/durées avec et sans cette étape pour savoir si cette personne est potentiellement capable de répondre au besoin du demandeur.

http://fr.wikipedia.org/wiki/Ellipse_(mathématiques)


------
Arrivals : ATTENTION GENERATION DU CHOICEFIELD DEPUIS LA PRIMARY KEY !!! ATTENTION DE NE PAS SUPPRIMER LES DESTINATIONS !!!!!
-------
Framework Javascript Mootools
-------
Framework CSS : blueprint
------
Markup language : utilisé pour permettre l'affichage des news comme elles ont été entrées
-> http://www.freewisdom.org/projects/python-markdown/Django

MARKUPFIELD : http://www.djangosnippets.org/snippets/1169/
----
Markdown toolbar : http://code.c7.se/js/markdown_toolbar/

--------
em = taille d'un texte normal (non stylisé)
-------
IMAGEFIELD : besoin de la librairie http://www.pythonware.com/products/pil/
